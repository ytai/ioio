allprojects {
    group = 'com.github.ytai.ioio'
    version = 5.07
    ext.versionNamespace = 'IOIO'
    ext.versionString = sprintf("%s%02d%02d",
            versionNamespace,
            (int) version,
            ((int) (version * 100)) % 100)
}

ext {
    defaultCompileSdkVersion = 25
    defaultMinSdkVersion = 16
    defaultTargetSdkVersion = 25
    defaultBuildToolsVersion = "25.0.3"
    defaultSupportLibVersion = "25.3.1"
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'signing'

    repositories {
        mavenCentral()
        maven {
            url "http://www.sparetimelabs.com/maven2"
        }
        maven {
            url 'https://oss.sonatype.org/content/groups/staging'
        }
    }

    afterEvaluate {
        // Replace dependendices on modules from the ioio group with local project
        // dependencies.
        configurations.each { config ->
            def ioioDeps = config.dependencies.findAll { it.group == group }
            config.dependencies.removeAll(ioioDeps)
            ioioDeps.each {
                dependencies.add(config.name, dependencies.project(path: ":$it.name"))
            }
        }

        // Common handling for uploading archives to Maven central.
        if (tasks.findByName('uploadArchives')?.repositories?.findByName('mavenDeployer')) {
            signing {
                sign configurations.archives
            }

            uploadArchives {
                repositories {
                    mavenDeployer {
                        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                            authentication(userName: hasProperty('OSSRH_USER') ? OSSRH_USER : '', password: hasProperty('OSSRH_PASSWORD') ? OSSRH_PASSWORD : '')
                        }

                        pom.project {
                            packaging 'jar'
                            url 'https://github.com/ytai/ioio/wiki'

                            scm {
                                connection 'scm:git@github.com:ytai/ioio.git'
                                developerConnection 'scm:git@github.com:ytai/ioio.git'
                                url 'https://www.github.com/ytai/ioio'
                            }

                            licenses {
                                license {
                                    name 'The BSD 2-Clause License'
                                    url 'http://opensource.org/licenses/bsd-license.php'
                                }
                            }

                            developers {
                                developer {
                                    id 'ytai'
                                    name 'Ytai Ben-Tsvi'
                                    email 'ytaibt@gmail.com'
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

///////////////////////////////////////////////////////////////////////////////
// Release bundle packaging.

evaluationDependsOnChildren()

def libraries = [
        'IOIOLibCore'            : ['jar'],
        'IOIOLibPC'              : ['jar'],
        'IOIOLibAndroid'         : ['bundleRelease', 'bundleDebug'],
        'IOIOLibAndroidBluetooth': ['bundleRelease', 'bundleDebug'],
        'IOIOLibAndroidAccessory': ['bundleRelease', 'bundleDebug'],
        'IOIOLibAndroidDevice'   : ['bundleRelease', 'bundleDebug']
]

def applications = [
        'applications/HelloIOIO'          : ['packageDebug'],
        'applications/HelloIOIOService'   : ['packageDebug'],
        'applications/IOIOSimpleApp'      : ['packageDebug'],
        'applications/pc/HelloIOIOConsole': ['distJar'],
        'applications/pc/HelloIOIOSwing'  : ['distJar'],
        'applications/pc/HelloSequencer'  : ['distJar']
]

def gitFiles(dirs) {
    ('git ls-files -- ' + dirs.join(' ')).execute().text.readLines()
}


task bundle(type: Zip) {
    baseName = 'App'
    version = versionString
    destinationDir = file('../release/software')

    into('src') {
        from fileTree('.').include(gitFiles(libraries.keySet()*.concat('/src'))).exclude('.git*')
        from fileTree('.').include(gitFiles(applications.keySet())).exclude('.git*')
    }

    libraries.each { entry ->
        entry.value.each { value ->
            into('lib') {
                from project(entry.key).tasks[value]
            }
        }
    }

    applications.each { entry ->
        entry.value.each { value ->
            into('bin') {
                from project(entry.key).tasks[value]
            }
        }
    }

    into('doc') {
        from project('IOIOLibCore').tasks.getByName('javadoc')
    }
}
